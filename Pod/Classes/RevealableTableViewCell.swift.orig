//
//  RevealableTableViewcell.swift
//  RevealableCell
//
//  Created by Shaps Mohsenin on 03/01/2016.
//  Copyright Â© 2016 CocoaPods. All rights reserved.
//

import UIKit

<<<<<<< HEAD
public class RevealableTableViewCell: UITableViewCell {
=======
open class RevealableTableViewCell: UITableViewCell {
>>>>>>> 41ca756e031bd5a48d2ac6613de109f0e5b27d39
    
    internal var horizontalConstraint: NSLayoutConstraint?
    internal var revealView: RevealableView?
    internal var revealWidth: CGFloat = 0
    
<<<<<<< HEAD
    public override var selected: Bool {
        didSet {
            revealView?.selected = selected
        }
    }
    
    public override var highlighted: Bool {
        didSet {
            revealView?.highlighted = highlighted
=======
    open override var isSelected: Bool {
        didSet {
            revealView?.isSelected = isSelected
        }
    }
    
    open override var isHighlighted: Bool {
        didSet {
            revealView?.isHighlighted = isHighlighted
>>>>>>> 41ca756e031bd5a48d2ac6613de109f0e5b27d39
        }
    }
    
    /**
     Ensure you call super.prepareForReuse() when overriding this method in your subclasses!
     */
<<<<<<< HEAD
    public override func prepareForReuse() {
=======
    open override func prepareForReuse() {
>>>>>>> 41ca756e031bd5a48d2ac6613de109f0e5b27d39
        super.prepareForReuse()
        
        if let view = revealView {
            view.prepareForReuse()
        }
    }
    
<<<<<<< HEAD
    public func setRevealableView(view: RevealableView, style: RevealStyle = .Slide, direction: RevealSwipeDirection = .Left) {
=======
    open func setRevealableView(_ view: RevealableView, style: RevealStyle = .slide, direction: RevealSwipeDirection = .left) {
>>>>>>> 41ca756e031bd5a48d2ac6613de109f0e5b27d39
        if let view = revealView {
            view.removeFromSuperview()
        }
        
        revealView = view
        view.style = style
        view.direction = direction
        
        view.sizeToFit()
        addSubview(view)
        
<<<<<<< HEAD
        let topConstraint = NSLayoutConstraint(item: view, attribute: .Top, relatedBy: .Equal, toItem: self, attribute: .Top, multiplier: 1, constant: 0)
        let bottomConstraint = NSLayoutConstraint(item: view, attribute: .Bottom, relatedBy: .Equal, toItem: self, attribute: .Bottom, multiplier: 1, constant: 0)
        
        let viewAttribute: NSLayoutAttribute = direction == .Left ? .Left : .Right
        let parentAttribute: NSLayoutAttribute = direction == .Left ? .Right : .Left
        let horizontalConstraint = NSLayoutConstraint(item: view, attribute: viewAttribute, relatedBy: .Equal, toItem: self, attribute: parentAttribute, multiplier: 1, constant: 0)
        self.horizontalConstraint = horizontalConstraint
        
        NSLayoutConstraint.activateConstraints([ topConstraint, bottomConstraint, horizontalConstraint ])
=======
        let topConstraint = NSLayoutConstraint(item: view, attribute: .top, relatedBy: .equal, toItem: self, attribute: .top, multiplier: 1, constant: 0)
        let bottomConstraint = NSLayoutConstraint(item: view, attribute: .bottom, relatedBy: .equal, toItem: self, attribute: .bottom, multiplier: 1, constant: 0)
        
        let viewAttribute: NSLayoutAttribute = direction == .left ? .left : .right
        let parentAttribute: NSLayoutAttribute = direction == .left ? .right : .left
        let horizontalConstraint = NSLayoutConstraint(item: view, attribute: viewAttribute, relatedBy: .equal, toItem: self, attribute: parentAttribute, multiplier: 1, constant: 0)
        self.horizontalConstraint = horizontalConstraint
        
        NSLayoutConstraint.activate([ topConstraint, bottomConstraint, horizontalConstraint ])
>>>>>>> 41ca756e031bd5a48d2ac6613de109f0e5b27d39
        
        if view.bounds.width == 0 {
            print("The revealableView has a width of 0. Check your AutoLayout settings or explicity set the width using the revealableView.width property")
        }
    }
    
}
